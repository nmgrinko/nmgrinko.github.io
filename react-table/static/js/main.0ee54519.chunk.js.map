{"version":3,"sources":["components/loading/index.js","components/loading/loading.js","components/button-test/button-test.js","actions/index.js","components/button-test/index.js","components/table/table-styles.js","components/table/table-frame.js","components/table/index.js","components/table/table.js","components/app/index.js","components/app/app.js","sagas/index.js","reducers/index.js","store.js","index.js"],"names":["Loading","connect","state","loading","className","mapDispatchToProps","getJson","type","ButtonTest","onClick","Styles","styled","div","TableFrame","columns","data","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","firstPageRows","slice","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","length","Table","props","React","useMemo","Header","accessor","dataR","undefined","dataX","App","fetchJson","actionWatcher","rootSaga","fetch","povider","then","response","json","put","resources","takeLatest","all","reducer","action","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","ReactDOM","document","getElementById"],"mappings":"0PAEeA,G,MCmBAC,aAHS,SAACC,GAAD,MAAY,CAACC,QAASD,EAAMC,WAGb,KAAxBF,EAhBD,SAAC,GAAD,SAAGE,QAEb,yBAAKC,UAAU,WACb,yBAAKA,UAAU,mBACb,8BACA,gCAGR,SCFMC,G,MAAqB,CACtBC,QCZkB,iBAAO,CAC5BC,KAAM,eCCOC,EFeAP,YAAQ,KAAMI,EAAdJ,EAVA,SAAC,GAAD,IAAGK,EAAH,EAAGA,QAAH,OACZ,4BAAQG,QAAUH,EAAUF,UAAU,6BAAtC,uB,yhBGNH,IA+BeM,E,MA/BAC,EAAOC,IAAV,K,QCkEGC,MAjEf,YAAwC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAAQ,EAOjCC,mBACF,CACEF,UACAC,QAEFE,aAVAC,EAFmC,EAEnCA,cACAC,EAHmC,EAGnCA,kBACAC,EAJmC,EAInCA,aACAC,EALmC,EAKnCA,KACAC,EANmC,EAMnCA,WAWIC,EAAgBF,EAAKG,MAAM,EAAG,IAEpC,OACE,oCACE,0BAAWN,IACT,+BACGE,EAAaK,KAAI,SAAAC,GAAW,OAC3B,uBAAQA,EAAYC,sBACjBD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAG7B,uBAAQA,EAAOC,eAAeD,EAAOE,wBAClCF,EAAOG,OAAO,UAEf,8BACGH,EAAOI,SACJJ,EAAOK,aACL,gBACA,gBACF,aAOhB,0BAAWf,IACRI,EAAcE,KACb,SAACU,EAAKC,GAAN,OACEd,EAAWa,IACT,uBAAQA,EAAIE,cACTF,EAAIG,MAAMb,KAAI,SAAAc,GACb,OACE,uBAAQA,EAAKC,eAAiBD,EAAKP,OAAO,kBAQ1D,6BACA,gEAAsCX,EAAKoB,OAA3C,WC5DSC,ECyDAzC,aATS,SAACC,GACvB,MAAO,CACLyC,MAAOzC,EAAMyC,SAOF1C,EAlDD,SAAC,GAAa,IAAZ0C,EAAW,EAAXA,MACR7B,EAAU8B,IAAMC,SACpB,iBAAM,CACJ,CACEC,OAAQ,QACRhC,QAAS,CACP,CACEgC,OAAQ,cACRC,SAAU,eAEZ,CACED,OAAQ,MACRC,SAAU,YAKlB,IAGEC,EAASL,EAcb,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAY7B,QAASA,EAASC,KAdtB,WACZ,IAAIA,EAAO,GAEN,YAAckC,IAAVD,EACMjC,EAGQ4B,EAOiBO,SC3C3BC,ECMH,WAEV,OACA,6BACG,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,0DCTKC,G,WAKAC,G,WAIeC,GATzB,SAAUF,IAAV,uEACe,OADf,SACqBG,MAAMC,8EAAmBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UADxE,OAEE,OADMA,EADR,gBAEQC,YAAI,CAAErD,KAAM,gBAAiBQ,KAAM4C,EAAKE,YAFhD,uCAKA,SAAUR,IAAV,iEACE,OADF,SACQS,YAAW,WAAYV,GAD/B,uCAIe,SAAUE,IAAV,iEACb,OADa,SACPS,YAAI,CAACV,MADE,uC,YCDGW,EAXF,WAAyB,IAAxB9D,EAAuB,uDAAf,GAAI+D,EAAW,uCACnC,OAAQA,EAAO1D,MACb,IAAK,WACH,OAAO,2BAAKL,GAAZ,IAAmBC,SAAS,IAC9B,IAAK,gBACH,OAAO,2BAAKD,GAAZ,IAAmByC,MAAOsB,EAAOlD,KAAMZ,SAAS,IAClD,QACE,OAAOD,ICAVgE,EAAiBC,cAEjBC,EAAQC,YACXL,EACAM,YAAgBJ,EAAgBK,WAGnCL,EAAeM,IAAIlB,GAEJc,QCVfK,IAASzC,OACN,kBAAC,IAAD,CAAUoC,MAAOA,GACf,kBAAC,EAAD,OAELM,SAASC,eAAe,W","file":"static/js/main.0ee54519.chunk.js","sourcesContent":["import Loading from './loading';\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nimport './loading.css';\r\n\r\nlet Loading = ({ loading }) => (\r\n  loading ?\r\n    <div className=\"lds-css\">\r\n      <div className=\"lds-double-ring\">\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>:\r\nnull\r\n);\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => ({loading: state.loading})\r\n\r\n\r\nexport default connect(mapStateToProps,null)(Loading)\r\n\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getJson } from '../../actions';\r\nimport './button-test.css';\r\n\r\n\r\nlet ButtonTest=({ getJson })=>(\r\n   <button onClick={ getJson } className='btn btn-success btn-block'>Show test result</button>\r\n);\r\n\r\nconst mapDispatchToProps = {\r\n     getJson: getJson\r\n};\r\n\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(ButtonTest);","export const getJson = () => ({\r\n  type: 'GET_JSON'\r\n});","import ButtonTest from './button-test';\r\n\r\nexport default ButtonTest;","import styled from 'styled-components'\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n  background-color: aqua;\r\n  \r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n    background-color: yellow;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Styles","import React from 'react';\r\nimport { useTable, useSortBy } from 'react-table'\r\n\r\nfunction TableFrame({ columns, data }) {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useSortBy\r\n  )\r\n\r\n  // We don't want to render all 2000 rows for this example, so cap\r\n  // it at 20 for this use case\r\n  const firstPageRows = rows.slice(0, 20)\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                // Add the sorting props to control sorting. For this example\r\n                // we can add them into the header props\r\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                  {column.render('Header')}\r\n                  {/* Add a sort direction indicator */}\r\n                  <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? ' ðŸ”½'\r\n                        : ' ðŸ”¼'\r\n                      : ''}\r\n                  </span>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {firstPageRows.map(\r\n            (row, i) =>\r\n              prepareRow(row) || (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map(cell => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                    )\r\n                  })}\r\n                </tr>\r\n              )\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n      <div>Showing the first 20 results of {rows.length} rows</div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default TableFrame","import Table from './table';\r\n\r\nexport default Table;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Styles from './table-styles';\r\nimport TableFrame from './table-frame';\r\n\r\n\r\n\r\n\r\nconst Table = ({props}) => {\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Users',\r\n        columns: [\r\n          {\r\n            Header: 'Name method',\r\n            accessor: 'name_method',\r\n          },\r\n          {\r\n            Header: 'URL',\r\n            accessor: 'url',\r\n          },\r\n        ],\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\nconst dataR = {props}.props;\r\n\r\nconst dataX = () => {\r\n  let data = [];\r\n\r\n       if (dataR === undefined) {\r\n          return data \r\n       }\r\n       else {\r\n          return data = {props}.props\r\n       };\r\n};\r\n\r\n\r\n  return (\r\n    <Styles>\r\n      <TableFrame columns={columns} data={dataX()} />\r\n    </Styles>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    props: state.props\r\n    \r\n  }\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Table);\r\n\r\n\r\n","import App from './app';\r\n\r\nexport default App;","import React from 'react';\r\n\r\nimport Loading from '../loading';\r\nimport ButtonTest from '../button-test';\r\nimport Table from '../table';\r\n\r\n\r\n\r\nconst App = () => {\r\n  \r\n  return (\r\n  <div>\r\n     <ButtonTest />\r\n     <Loading />\r\n     <Table />\r\n  </div>\r\n);\r\n}\r\n\r\nexport default App;","import { put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nconst povider = 'https://cors-anywhere.herokuapp.com/';\r\nconst urlTest = 'http://users.bugred.ru/tasks/rest/list';\r\n\r\nfunction* fetchJson() {\r\n  const json = yield fetch(povider + urlTest).then(response => response.json());\r\n  yield put({ type: \"JSON_RECEIVED\", data: json.resources });\r\n}\r\n\r\nfunction* actionWatcher() {\r\n  yield takeLatest(\"GET_JSON\", fetchJson);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([actionWatcher()]);\r\n}\r\n\r\n","\r\n\r\nconst reducer = (state = {}, action) => {\r\n     switch (action.type) {\r\n       case \"GET_JSON\":\r\n         return { ...state, loading: true };\r\n       case \"JSON_RECEIVED\":\r\n         return { ...state, props: action.data, loading: false };\r\n       default:\r\n         return state;\r\n     }\r\n   };\r\n   \r\n   export default reducer;\r\n   \r\n\r\n\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga'; \r\nimport { logger } from 'redux-logger';\r\n\r\nimport rootSaga from './sagas';\r\nimport reducer from './reducers';\r\n\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n   reducer,\r\n   applyMiddleware(sagaMiddleware, logger),\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './components/app';\r\nimport store from './store';\r\n\r\n\r\nReactDOM.render(\r\n   <Provider store={store}>\r\n     <App />\r\n   </Provider>,\r\ndocument.getElementById('root'),\r\n);\r\n\r\n\r\nif (module.hot) { module.hot.accept(App);}\r\n\r\n\r\n"],"sourceRoot":""}